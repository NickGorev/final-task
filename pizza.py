from typing import List, Optional


class Pizza:
    """–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∏—Ü—Ü–∞"""

    PIZZA_SIZES = ["L", "XL"]
    ingredients: List[str] = []
    emoji = ""

    def __init__(self, size: Optional[str] = "L"):
        if size is None:
            size = "L"
        size = size.upper()
        if size not in self.__class__.PIZZA_SIZES:
            raise ValueError(f"size must be in {self.__class__.PIZZA_SIZES}")
        self.size = size

    def dict(self) -> dict:
        """
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        cls = self.__class__
        return {
            "name": cls.__name__,
            "emoji": cls.emoji,
            "ingredients": cls.ingredients,
            "size": self.size,
        }

    def __str__(self) -> str:
        """
        –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ü—Ü—ã –≤ –≤–∏–¥–µ:
        <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∏–∫–æ–Ω–∫–∞>: <—Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é>
        """
        recipe = self.dict()
        ingredients_str = ", ".join(recipe["ingredients"])
        return f'{recipe["name"]} {recipe["emoji"]}: {ingredients_str}'

    def __eq__(self, other: object) -> bool:
        """
        –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ü—Ü –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
        """
        return (
            isinstance(other, Pizza)
            and self.size == other.size
            and set(self.ingredients) == set(other.ingredients)
        )


class Margherita(Pizza):
    """–ø–∏—Ü—Ü–∞ –º–∞—Ä–≥–∞—Ä–∏—Ç–∞"""

    ingredients = ["tomato sauce", "mozzarella", "tomatoes"]
    emoji = "üßÄ"


class Pepperoni(Pizza):
    """–ø–∏—Ü—Ü–∞ –ø–µ–ø–µ—Ä–æ–Ω–∏"""

    ingredients = ["tomato sauce", "mozzarella", "pepperoni"]
    emoji = "üçï"


class Hawaiian(Pizza):
    """–≥–∞–≤–∞–π—Å–∫–∞—è –ø–∏—Ü—Ü–∞"""

    ingredients = ["tomato sauce", "mozzarella", "chicken", "pineapples"]
    emoji = "üçç"
